{"version":3,"sources":["components/NavTabs.js","images/dog.jpeg","components/pages/About.js","components/pages/Portfolio.js","components/pages/Contact.js","utils/helpers.js","components/PortfolioContainer.js","App.js","index.js"],"names":["NavTabs","currentPage","handlePageChange","className","href","onClick","About","src","dog","Portfolio","projects","name","livelink","repo","image","map","project","Contact","useState","email","setEmail","userName","setUserName","password","setPassword","errorMessage","setErrorMessage","handleInputChange","e","target","inputType","inputValue","value","onChange","type","placeholder","preventDefault","test","String","toLowerCase","validateEmail","match","alert","PortfolioContainer","setCurrentPage","page","App","ReactDOM","render","document","getElementById"],"mappings":"6KAoDeA,MAhDf,YAAqD,IAAlCC,EAAiC,EAAjCA,YAAaC,EAAoB,EAApBA,iBAC9B,OACE,qBAAIC,UAAU,eAAd,UAYE,oBAAIA,UAAU,WAAd,SACE,mBACEC,KAAK,SACLC,QAAS,kBAAMH,EAAiB,UAEhCC,UAA2B,UAAhBF,EAA0B,kBAAoB,WAJ3D,qBASF,oBAAIE,UAAU,WAAd,SACE,mBACEC,KAAK,aACLC,QAAS,kBAAMH,EAAiB,cAEhCC,UAA2B,cAAhBF,EAA8B,kBAAoB,WAJ/D,yBASF,oBAAIE,UAAU,WAAd,SACE,mBACEC,KAAK,WACLC,QAAS,kBAAMH,EAAiB,YAEhCC,UAA2B,YAAhBF,EAA4B,kBAAoB,WAJ7D,2BCvCO,MAA0B,iCCG1B,SAASK,IACtB,OACE,gCACE,4CACA,qBAAKC,IAAKC,IACV,gcCLS,SAASC,IACtB,IAAMC,EAAW,CACf,CACEC,KAAM,WACNC,SAAU,qDACVC,KAAM,qDACNC,MAAON,IAGX,OACE,gCACE,2CACCE,EAASK,KAAI,SAAAC,GAAO,OACnB,gCACE,6BAAKA,EAAQL,OACb,qBAAKJ,IAAKS,EAAQF,QAClB,mBAAGV,KAAMY,EAAQJ,SAAjB,uBACA,mBAAGR,KAAMY,EAAQH,KAAjB,2BCsEKI,MArFf,WAGE,MAA0BC,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAAgCF,mBAAS,IAAzC,mBAAOG,EAAP,KAAiBC,EAAjB,KACA,EAAgCJ,mBAAS,IAAzC,mBAAOK,EAAP,KAAiBC,EAAjB,KACA,EAAwCN,mBAAS,IAAjD,mBAAOO,EAAP,KAAqBC,EAArB,KAEMC,EAAoB,SAACC,GAEzB,IAAQC,EAAWD,EAAXC,OACFC,EAAYD,EAAOlB,KACnBoB,EAAaF,EAAOG,MAGR,UAAdF,EACFV,EAASW,GACc,aAAdD,EACTR,EAAYS,GAEZP,EAAYO,IA6BhB,OACE,gCACE,uCAAUV,KACV,uBAAMlB,UAAU,OAAhB,UACE,uBACE6B,MAAOb,EACPR,KAAK,QACLsB,SAAUN,EACVO,KAAK,QACLC,YAAY,UAEd,uBACEH,MAAOX,EACPV,KAAK,WACLsB,SAAUN,EACVO,KAAK,OACLC,YAAY,aAEd,uBACEH,MAAOT,EACPZ,KAAK,WACLsB,SAAUN,EACVO,KAAK,WACLC,YAAY,aAEd,wBAAQD,KAAK,SAAS7B,QAlDH,SAACuB,IAExBA,EAAEQ,iBC/BC,SAAuBjB,GAE5B,MADW,wJACDkB,KAAKC,OAAOnB,GAAOoB,eDgCtBC,CAAcrB,IAAWE,GAMXE,ECjCXkB,MADI,uBDwCZC,MAAM,SAAD,OAAUrB,IAGfC,EAAY,IACZE,EAAY,IACZJ,EAAS,KAVPM,EAAgB,kDAAD,OACqCL,IAPpDK,EAAgB,iCA4Cd,uBAEDD,GACC,8BACE,mBAAGtB,UAAU,aAAb,SAA2BsB,UE7EtB,SAASkB,IACtB,MAAsCzB,mBAAS,SAA/C,mBAAOjB,EAAP,KAAoB2C,EAApB,KAeA,OACE,gCAEE,cAAC,EAAD,CAAS3C,YAAaA,EAAaC,iBALd,SAAC2C,GAAD,OAAUD,EAAeC,MAT5B,UAAhB5C,EACK,cAACK,EAAD,IAEW,cAAhBL,EACK,cAACQ,EAAD,IAEF,cAAC,EAAD,OCdX,IAEeqC,EAFH,kBAAM,cAACH,EAAD,K,MCElBI,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.95460091.chunk.js","sourcesContent":["import React from 'react';\n\n// Here we are using object destructuring assignment to pluck off our variables from the props object\n// We assign them to their own variable names\nfunction NavTabs({ currentPage, handlePageChange }) {\n  return (\n    <ul className=\"nav nav-tabs\">\n      {/* <li className=\"nav-item\">\n        <a\n          href=\"#home\"\n          onClick={() => handlePageChange('Home')}\n          // This is a conditional (ternary) operator that checks to see if the current page is \"Home\"\n          // If it is, we set the current page to 'nav-link-active', otherwise we set it to 'nav-link'\n          className={currentPage === 'Home' ? 'nav-link active' : 'nav-link'}\n        >\n          Home\n        </a>\n      </li> */}\n      <li className=\"nav-item\">\n        <a\n          href=\"#about\"\n          onClick={() => handlePageChange('About')}\n          // Check to see if the currentPage is `About`, and if so we use the active link class from bootstrap. Otherwise, we set it to a normal nav-link\n          className={currentPage === 'About' ? 'nav-link active' : 'nav-link'}\n        >\n          About\n        </a>\n      </li>\n      <li className=\"nav-item\">\n        <a\n          href=\"#portfolio\"\n          onClick={() => handlePageChange('Portfolio')}\n          // Check to see if the currentPage is `Portfolio`, and if so we use the active link class from bootstrap. Otherwise, we set it to a normal nav-link\n          className={currentPage === 'Portfolio' ? 'nav-link active' : 'nav-link'}\n        >\n          Portfolio\n        </a>\n      </li>\n      <li className=\"nav-item\">\n        <a\n          href=\"#contact\"\n          onClick={() => handlePageChange('Contact')}\n          // Check to see if the currentPage is `Contact`, and if so we use the active link class from bootstrap. Otherwise, we set it to a normal nav-link\n          className={currentPage === 'Contact' ? 'nav-link active' : 'nav-link'}\n        >\n          Contact\n        </a>\n      </li>\n    </ul>\n  );\n}\n\nexport default NavTabs;\n","export default __webpack_public_path__ + \"static/media/dog.923fefdc.jpeg\";","import React from 'react';\nimport dog from '../../images/dog.jpeg';\n\nexport default function About() {\n  return (\n    <div>\n      <h1>About Page</h1>\n      <img src={dog}/>\n      <p>\n        Nunc pharetra finibus est at efficitur. Praesent sed congue diam.\n        Integer gravida dui mauris, ut interdum nunc egestas sed. Aenean sed\n        mollis diam. Nunc aliquet risus ac finibus porta. Nam quis arcu non\n        lectus tincidunt fermentum. Suspendisse aliquet orci porta quam semper\n        imperdiet. Praesent euismod mi justo, faucibus scelerisque risus cursus\n        in. Sed rhoncus mollis diam, sit amet facilisis lectus blandit at.\n      </p>\n    </div>\n  );\n}\n","import React from 'react';\nimport dog from \"../../images/dog.jpeg\"\n\nexport default function Portfolio() {\n  const projects = [\n    {\n      name: \"project1\",\n      livelink: \"https://stephanieheins.github.io/CovidCountryData/\",\n      repo: \"https://github.com/StephanieHeins/CovidCountryData\",\n      image: dog\n    }\n  ]\n  return (\n    <div>\n      <h1>Portfolio</h1>\n      {projects.map(project => (\n        <div>\n          <h4>{project.name}</h4>\n          <img src={project.image}/>\n          <a href={project.livelink}>Live Site</a>\n          <a href={project.repo}>Repo</a>\n        </div>\n      ))}\n    </div>\n  );\n}\n","import React, { useState } from 'react';\n\n// Here we import a helper function that will check if the email is valid\nimport { checkPassword, validateEmail } from '../../utils/helpers';\n\nfunction Contact() {\n  // Create state variables for the fields in the form\n  // We are also setting their initial values to an empty string\n  const [email, setEmail] = useState('');\n  const [userName, setUserName] = useState('');\n  const [password, setPassword] = useState('');\n  const [errorMessage, setErrorMessage] = useState('');\n\n  const handleInputChange = (e) => {\n    // Getting the value and name of the input which triggered the change\n    const { target } = e;\n    const inputType = target.name;\n    const inputValue = target.value;\n\n    // Based on the input type, we set the state of either email, username, and password\n    if (inputType === 'email') {\n      setEmail(inputValue);\n    } else if (inputType === 'userName') {\n      setUserName(inputValue);\n    } else {\n      setPassword(inputValue);\n    }\n  };\n\n  const handleFormSubmit = (e) => {\n    // Preventing the default behavior of the form submit (which is to refresh the page)\n    e.preventDefault();\n\n    // First we check to see if the email is not valid or if the userName is empty. If so we set an error message to be displayed on the page.\n    if (!validateEmail(email) || !userName) {\n      setErrorMessage('Email or username is invalid');\n      // We want to exit out of this code block if something is wrong so that the user can correct it\n      return;\n      // Then we check to see if the password is not valid. If so, we set an error message regarding the password.\n    }\n    if (!checkPassword(password)) {\n      setErrorMessage(\n        `Choose a more secure password for the account: ${userName}`\n      );\n      return;\n    }\n    alert(`Hello ${userName}`);\n\n    // If everything goes according to plan, we want to clear out the input after a successful registration.\n    setUserName('');\n    setPassword('');\n    setEmail('');\n  };\n\n  return (\n    <div>\n      <p>Hello {userName}</p>\n      <form className=\"form\">\n        <input\n          value={email}\n          name=\"email\"\n          onChange={handleInputChange}\n          type=\"email\"\n          placeholder=\"email\"\n        />\n        <input\n          value={userName}\n          name=\"userName\"\n          onChange={handleInputChange}\n          type=\"text\"\n          placeholder=\"username\"\n        />\n        <input\n          value={password}\n          name=\"password\"\n          onChange={handleInputChange}\n          type=\"password\"\n          placeholder=\"Password\"\n        />\n        <button type=\"button\" onClick={handleFormSubmit}>Submit</button>\n      </form>\n      {errorMessage && (\n        <div>\n          <p className=\"error-text\">{errorMessage}</p>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default Contact;\n","export function validateEmail(email) {\n  const re = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n  return re.test(String(email).toLowerCase());\n}\n\nexport function checkPassword(input) {\n  const passw = /^[A-Za-z]\\w{7,14}$/;\n  if (input.match(passw)) {\n    return true;\n  }\n  return false;\n}\n","import React, { useState } from 'react';\nimport NavTabs from './NavTabs';\nimport About from './pages/About';\nimport Portfolio from './pages/Portfolio';\nimport Contact from './pages/Contact';\n\nexport default function PortfolioContainer() {\n  const [currentPage, setCurrentPage] = useState('About');\n\n  // This method is checking to see what the value of `currentPage` is. Depending on the value of currentPage, we return the corresponding component to render.\n  const renderPage = () => {\n    if (currentPage === 'About') {\n      return <About />;\n    }\n    if (currentPage === 'Portfolio') {\n      return <Portfolio />;\n    }\n    return <Contact />;\n  };\n\n  const handlePageChange = (page) => setCurrentPage(page);\n\n  return (\n    <div>\n      {/* We are passing the currentPage from state and the function to update it */}\n      <NavTabs currentPage={currentPage} handlePageChange={handlePageChange} />\n      {/* Here we are calling the renderPage method which will return a component  */}\n      {renderPage()}\n    </div>\n  );\n}\n","import React from \"react\";\nimport PortfolioContainer from \"./components/PortfolioContainer\";\n\nconst App = () => <PortfolioContainer />;\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}